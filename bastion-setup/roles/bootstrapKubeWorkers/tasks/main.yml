---
# tasks file for bootstrapKubeWorkers
# TODO
# - Check the cluster DNS in "Create the kubelet-config.yaml configuration file"
# - Check pod-cidr url within the worker node
# - Verification
- name: Install  OS dependencies
    
  become: true
  apt:
    name: "{{ item }}"
  with_items:
    - socat
    - conntrack
    - ipset
    - nginx
- name: Disable swap
  shell: "swapoff -a"

- name: Ensure group "kube" exists
  group:
    name: kube
    state: present
- name: Add the user 'kube' and a primary group of 'kube'
  user:
    name: kube
    comment: kube local user
    group: kube


#Download and Install Worker Binaries
- name: Downloading cri,runc,cni,containerd,kubectl,kube-proxy kubelet

  get_url: 
    url: "{{ item }}"
    dest: /tmp
  with_items:
    - "{{cri_tools_url}}"
    - "{{runc_url}}"
    - "{{cni_url}}"
    - "{{containerd_url}}"
    - "{{kubectl_url}}"
    - "{{kube_proxy_url}}"
    - "{{kubelet_url}}"

- name: Create the installation directories 
  file:
    path:  "{{item}}"
    state: directory
  with_items:
    - "/etc/cni/net.d"
    - "/opt/cni/bin"
    - "/var/lib/kubelet"
    - "/var/lib/kube-proxy"
    - "/var/lib/kubernetes"
    - "/var/run/kubernetes"
    - "/tmp/containerd"
    - "/etc/containerd/"



- name: Extract crictl binary
  unarchive:
    src: "/tmp/crictl-v1.15.0-linux-amd64.tar.gz"
    dest: /tmp
    remote_src: yes

- name: Extract containerd binary
  unarchive:
    src: "/tmp/containerd-1.2.9.linux-amd64.tar.gz"
    dest: /tmp/containerd
    remote_src: yes

 
- name: Extract cni binary
  unarchive:
    src: "/tmp/cni-plugins-linux-amd64-v0.8.2.tgz"
    dest: /opt/cni/bin/
    remote_src: yes

- name: Copy runc into /usr/local/bin/
  copy:
    src: /tmp/runc.amd64 
    dest: /usr/local/bin/runc
    owner: kube
    group: kube
    mode: '0755'
    remote_src: yes

- name: Copy crictl kubectl kube-proxy kubelet into /usr/local/bin/
  copy:
    src: "/tmp/{{item}}"
    dest: "/usr/local/bin/{{item}}"
    owner: kube
    group: kube
    mode: '0755'
    remote_src: yes
  with_items:
    - "crictl" 
    - "kubectl"
    - "kube-proxy"
    - "kubelet"
 
  
- name: Copy containerd into /usr/local/bin/
  copy:
    src: "/tmp/containerd/bin/{{item}}"
    dest: "/usr/local/bin/{{item}}"
    owner: kube
    group: kube
    mode: '0755'
    remote_src: yes
  with_items:
    - "containerd"
    - "containerd-shim"
    - "containerd-shim-runc-v1"
    - "containerd-stress"
    - "ctr"
- name: Create the config.toml configuration file
  copy:  
    src:  "{{ role_path }}/files/config.toml"
    dest:  /etc/containerd/config.toml
    owner: root
    group: root
    mode: '0644'



# Configure CNI Networking
# not sure if this will work, pod-cidr is a new endpoint
- name: Retrieve the Pod CIDR range
  uri:
    url: http://metadata.google.internal/computeMetadata/v1/instance/attributes/pod-cidr
    method: GET
    return_content: yes
    headers:
      Metadata-Flavor: Google
  register: pod_cidr



- name: Create the bridge network configuration file
  template:  
    src:  "{{ role_path }}/templates/10-bridge.conf.j2"
    dest:  /etc/cni/net.d/10-bridge.conf
    mode: '0755'

- name: Create the bridge network configuration file
  template:  
    src:  "{{ role_path }}/templates/99-loopback.conf.j2"
    dest:  /etc/cni/net.d/99-loopback.conf
    mode: '0755'


    

#Configure containerd

- name: Create the containerd.service systemd unit file
  copy:
    src: "{{ role_path }}/files/containerd.service"
    dest: /etc/systemd/system/containerd.service 
    mode: '0755'

#Configure the Kubelet
- name: Create the kubelet-config.yaml configuration file
  template:  
    src:  "{{ role_path }}/templates/kubelet-config.yaml.j2"
    dest:  /var/lib/kubelet/kubelet-config.yaml
    mode: '0755'
- name: Configure client keys and cert/var/lib/kubelet/
  copy:
    src: "/{{item}}"
    dest: "/var/lib/kubelet/{{item}}"
    mode: '0644'
    remote_src: yes
  with_items:
    - "{{ inventory_hostname }}-key.pem"
    - "{{ inventory_hostname }}.pem"
- name: move ca.pem to /var/lib/kubernetes/
  copy:
    src: /ca.pem
    dest: /var/lib/kubernetes/ca.pem
    mode: '0644'
    remote_src: yes

- name: Create the kubelet.service systemd unit file
  copy:
    src: "{{ role_path }}/files/kubelet.service"
    dest: /etc/systemd/system/kubelet.service
    mode: '0755'
- name: mv kube-{hostname}.kubeconfig
  copy:
    src:  "/{{ inventory_hostname }}.kubeconfig"
    dest: /var/lib/kubelet/kubeconfig
    mode: '0755'
    remote_src: yes
    
# Configure the Kubernetes Proxy
- name: mv kube-proxy.kubeconfig
  copy:
    src:  /kube-proxy.kubeconfig
    dest: /var/lib/kube-proxy/kubeconfig
    mode: '0755'
    remote_src: yes

- name: Create the kube-proxy-config.yaml configuration file
  copy:
    src: "{{ role_path }}/files/kube-proxy-config.yaml"
    dest: /var/lib/kube-proxy/kube-proxy-config.yaml
    mode: '0755'

- name: Create the kube-proxy.service systemd unit file
  copy:
    src: "{{ role_path }}/files/kube-proxy.service"
    dest: /etc/systemd/system/kube-proxy.service
    mode: '0755'


- name: systemd reload
  systemd:
    daemon_reload: yes

- name: Start the Worker Services
  service: 
    name: "{{item}}"
    state: started 
    enabled: yes
  with_items: 
    - containerd
    - kubelet
    - kube-proxy
